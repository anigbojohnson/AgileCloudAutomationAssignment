/**
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.CRUDOperations;
import org.xtext.example.mydsl.myDsl.CollectionEntry;
import org.xtext.example.mydsl.myDsl.CollectionSchema;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Operation;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>CRUD Operations</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.CRUDOperationsImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.CRUDOperationsImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.CRUDOperationsImpl#getCollection <em>Collection</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.CRUDOperationsImpl#getEntries <em>Entries</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.CRUDOperationsImpl#getUpdateOperation <em>Update Operation</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.CRUDOperationsImpl#getCriteria <em>Criteria</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CRUDOperationsImpl extends MinimalEObjectImpl.Container implements CRUDOperations
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final Operation TYPE_EDEFAULT = Operation.GET;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected Operation type = TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getCollection() <em>Collection</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCollection()
   * @generated
   * @ordered
   */
  protected CollectionSchema collection;

  /**
   * The cached value of the '{@link #getEntries() <em>Entries</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEntries()
   * @generated
   * @ordered
   */
  protected EList<CollectionEntry> entries;

  /**
   * The default value of the '{@link #getUpdateOperation() <em>Update Operation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpdateOperation()
   * @generated
   * @ordered
   */
  protected static final String UPDATE_OPERATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getUpdateOperation() <em>Update Operation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpdateOperation()
   * @generated
   * @ordered
   */
  protected String updateOperation = UPDATE_OPERATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getCriteria() <em>Criteria</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCriteria()
   * @generated
   * @ordered
   */
  protected EList<CollectionEntry> criteria;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CRUDOperationsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.CRUD_OPERATIONS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.CRUD_OPERATIONS__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operation getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(Operation newType)
  {
    Operation oldType = type;
    type = newType == null ? TYPE_EDEFAULT : newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.CRUD_OPERATIONS__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CollectionSchema getCollection()
  {
    if (collection != null && collection.eIsProxy())
    {
      InternalEObject oldCollection = (InternalEObject)collection;
      collection = (CollectionSchema)eResolveProxy(oldCollection);
      if (collection != oldCollection)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.CRUD_OPERATIONS__COLLECTION, oldCollection, collection));
      }
    }
    return collection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CollectionSchema basicGetCollection()
  {
    return collection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCollection(CollectionSchema newCollection)
  {
    CollectionSchema oldCollection = collection;
    collection = newCollection;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.CRUD_OPERATIONS__COLLECTION, oldCollection, collection));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<CollectionEntry> getEntries()
  {
    if (entries == null)
    {
      entries = new EObjectContainmentEList<CollectionEntry>(CollectionEntry.class, this, MyDslPackage.CRUD_OPERATIONS__ENTRIES);
    }
    return entries;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getUpdateOperation()
  {
    return updateOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUpdateOperation(String newUpdateOperation)
  {
    String oldUpdateOperation = updateOperation;
    updateOperation = newUpdateOperation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.CRUD_OPERATIONS__UPDATE_OPERATION, oldUpdateOperation, updateOperation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<CollectionEntry> getCriteria()
  {
    if (criteria == null)
    {
      criteria = new EObjectContainmentEList<CollectionEntry>(CollectionEntry.class, this, MyDslPackage.CRUD_OPERATIONS__CRITERIA);
    }
    return criteria;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.CRUD_OPERATIONS__ENTRIES:
        return ((InternalEList<?>)getEntries()).basicRemove(otherEnd, msgs);
      case MyDslPackage.CRUD_OPERATIONS__CRITERIA:
        return ((InternalEList<?>)getCriteria()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.CRUD_OPERATIONS__NAME:
        return getName();
      case MyDslPackage.CRUD_OPERATIONS__TYPE:
        return getType();
      case MyDslPackage.CRUD_OPERATIONS__COLLECTION:
        if (resolve) return getCollection();
        return basicGetCollection();
      case MyDslPackage.CRUD_OPERATIONS__ENTRIES:
        return getEntries();
      case MyDslPackage.CRUD_OPERATIONS__UPDATE_OPERATION:
        return getUpdateOperation();
      case MyDslPackage.CRUD_OPERATIONS__CRITERIA:
        return getCriteria();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.CRUD_OPERATIONS__NAME:
        setName((String)newValue);
        return;
      case MyDslPackage.CRUD_OPERATIONS__TYPE:
        setType((Operation)newValue);
        return;
      case MyDslPackage.CRUD_OPERATIONS__COLLECTION:
        setCollection((CollectionSchema)newValue);
        return;
      case MyDslPackage.CRUD_OPERATIONS__ENTRIES:
        getEntries().clear();
        getEntries().addAll((Collection<? extends CollectionEntry>)newValue);
        return;
      case MyDslPackage.CRUD_OPERATIONS__UPDATE_OPERATION:
        setUpdateOperation((String)newValue);
        return;
      case MyDslPackage.CRUD_OPERATIONS__CRITERIA:
        getCriteria().clear();
        getCriteria().addAll((Collection<? extends CollectionEntry>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.CRUD_OPERATIONS__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MyDslPackage.CRUD_OPERATIONS__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case MyDslPackage.CRUD_OPERATIONS__COLLECTION:
        setCollection((CollectionSchema)null);
        return;
      case MyDslPackage.CRUD_OPERATIONS__ENTRIES:
        getEntries().clear();
        return;
      case MyDslPackage.CRUD_OPERATIONS__UPDATE_OPERATION:
        setUpdateOperation(UPDATE_OPERATION_EDEFAULT);
        return;
      case MyDslPackage.CRUD_OPERATIONS__CRITERIA:
        getCriteria().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.CRUD_OPERATIONS__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MyDslPackage.CRUD_OPERATIONS__TYPE:
        return type != TYPE_EDEFAULT;
      case MyDslPackage.CRUD_OPERATIONS__COLLECTION:
        return collection != null;
      case MyDslPackage.CRUD_OPERATIONS__ENTRIES:
        return entries != null && !entries.isEmpty();
      case MyDslPackage.CRUD_OPERATIONS__UPDATE_OPERATION:
        return UPDATE_OPERATION_EDEFAULT == null ? updateOperation != null : !UPDATE_OPERATION_EDEFAULT.equals(updateOperation);
      case MyDslPackage.CRUD_OPERATIONS__CRITERIA:
        return criteria != null && !criteria.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", type: ");
    result.append(type);
    result.append(", updateOperation: ");
    result.append(updateOperation);
    result.append(')');
    return result.toString();
  }

} //CRUDOperationsImpl
