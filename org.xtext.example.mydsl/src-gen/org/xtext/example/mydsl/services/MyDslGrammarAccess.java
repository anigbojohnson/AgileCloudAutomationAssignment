/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MongoDBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MongoDB");
		private final Assignment cModelsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cModelsModelParserRuleCall_0 = (RuleCall)cModelsAssignment.eContents().get(0);
		
		//MongoDB:
		//    models += Model*;
		@Override public ParserRule getRule() { return rule; }
		
		//models += Model*
		public Assignment getModelsAssignment() { return cModelsAssignment; }
		
		//Model
		public RuleCall getModelsModelParserRuleCall_0() { return cModelsModelParserRuleCall_0; }
	}
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConnectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConnectionConnectionStatementParserRuleCall_0_0 = (RuleCall)cConnectionAssignment_0.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsCRUDOperationAndCollectionSchemaParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//Model:
		//  connection=ConnectionStatement
		//  statements+=CRUDOperationAndCollectionSchema*;
		@Override public ParserRule getRule() { return rule; }
		
		//connection=ConnectionStatement
		//statements+=CRUDOperationAndCollectionSchema*
		public Group getGroup() { return cGroup; }
		
		//connection=ConnectionStatement
		public Assignment getConnectionAssignment_0() { return cConnectionAssignment_0; }
		
		//ConnectionStatement
		public RuleCall getConnectionConnectionStatementParserRuleCall_0_0() { return cConnectionConnectionStatementParserRuleCall_0_0; }
		
		//statements+=CRUDOperationAndCollectionSchema*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//CRUDOperationAndCollectionSchema
		public RuleCall getStatementsCRUDOperationAndCollectionSchemaParserRuleCall_1_0() { return cStatementsCRUDOperationAndCollectionSchemaParserRuleCall_1_0; }
	}
	public class CRUDOperationAndCollectionSchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CRUDOperationAndCollectionSchema");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSchemaAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSchemaCollectionSchemaParserRuleCall_0_0 = (RuleCall)cSchemaAssignment_0.eContents().get(0);
		private final Assignment cOperationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperationsCRUDOperationsParserRuleCall_1_0 = (RuleCall)cOperationsAssignment_1.eContents().get(0);
		
		//CRUDOperationAndCollectionSchema:
		//  schema=CollectionSchema operations+=CRUDOperations* ;
		@Override public ParserRule getRule() { return rule; }
		
		//schema=CollectionSchema operations+=CRUDOperations*
		public Group getGroup() { return cGroup; }
		
		//schema=CollectionSchema
		public Assignment getSchemaAssignment_0() { return cSchemaAssignment_0; }
		
		//CollectionSchema
		public RuleCall getSchemaCollectionSchemaParserRuleCall_0_0() { return cSchemaCollectionSchemaParserRuleCall_0_0; }
		
		//operations+=CRUDOperations*
		public Assignment getOperationsAssignment_1() { return cOperationsAssignment_1; }
		
		//CRUDOperations
		public RuleCall getOperationsCRUDOperationsParserRuleCall_1_0() { return cOperationsCRUDOperationsParserRuleCall_1_0; }
	}
	public class ConnectionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ConnectionStatement");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cDatabaseParametersKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cConnectionKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cConnectionStringAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cConnectionStringSTRINGTerminalRuleCall_0_3_0 = (RuleCall)cConnectionStringAssignment_0_3.eContents().get(0);
		private final Keyword cCommaKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cDatabaseNameKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDatabaseNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDatabaseNameSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cDatabaseNameAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ConnectionStatement:
		//  'DatabaseParameters' '{'
		//  'Connection' connectionString=STRING ','&
		//    'databaseName' databaseName=STRING
		//  '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DatabaseParameters' '{'
		//'Connection' connectionString=STRING ','&
		//  'databaseName' databaseName=STRING
		//'}'
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//'DatabaseParameters' '{'
		//'Connection' connectionString=STRING ','
		public Group getGroup_0() { return cGroup_0; }
		
		//'DatabaseParameters'
		public Keyword getDatabaseParametersKeyword_0_0() { return cDatabaseParametersKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }
		
		//'Connection'
		public Keyword getConnectionKeyword_0_2() { return cConnectionKeyword_0_2; }
		
		//connectionString=STRING
		public Assignment getConnectionStringAssignment_0_3() { return cConnectionStringAssignment_0_3; }
		
		//STRING
		public RuleCall getConnectionStringSTRINGTerminalRuleCall_0_3_0() { return cConnectionStringSTRINGTerminalRuleCall_0_3_0; }
		
		//','
		public Keyword getCommaKeyword_0_4() { return cCommaKeyword_0_4; }
		
		//  'databaseName' databaseName=STRING
		//'}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'databaseName'
		public Keyword getDatabaseNameKeyword_1_0() { return cDatabaseNameKeyword_1_0; }
		
		//databaseName=STRING
		public Assignment getDatabaseNameAssignment_1_1() { return cDatabaseNameAssignment_1_1; }
		
		//STRING
		public RuleCall getDatabaseNameSTRINGTerminalRuleCall_1_1_0() { return cDatabaseNameSTRINGTerminalRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class CollectionSchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CollectionSchema");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCollectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cDefinationAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cDefinationCollectionFieldDefinationParserRuleCall_3_0_0 = (RuleCall)cDefinationAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cDefinationAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cDefinationCollectionFieldDefinationParserRuleCall_3_1_1_0 = (RuleCall)cDefinationAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CollectionSchema:
		//  'Collection' name=ID
		//  '{'
		//    (defination+=CollectionFieldDefination (',' defination+=CollectionFieldDefination)*)?
		//  '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Collection' name=ID
		//'{'
		//  (defination+=CollectionFieldDefination (',' defination+=CollectionFieldDefination)*)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Collection'
		public Keyword getCollectionKeyword_0() { return cCollectionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(defination+=CollectionFieldDefination (',' defination+=CollectionFieldDefination)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//defination+=CollectionFieldDefination
		public Assignment getDefinationAssignment_3_0() { return cDefinationAssignment_3_0; }
		
		//CollectionFieldDefination
		public RuleCall getDefinationCollectionFieldDefinationParserRuleCall_3_0_0() { return cDefinationCollectionFieldDefinationParserRuleCall_3_0_0; }
		
		//(',' defination+=CollectionFieldDefination)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//defination+=CollectionFieldDefination
		public Assignment getDefinationAssignment_3_1_1() { return cDefinationAssignment_3_1_1; }
		
		//CollectionFieldDefination
		public RuleCall getDefinationCollectionFieldDefinationParserRuleCall_3_1_1_0() { return cDefinationCollectionFieldDefinationParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CollectionFieldDefinationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CollectionFieldDefination");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFieldTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cFieldTypeFieldTypeEnumRuleCall_0_2_0 = (RuleCall)cFieldTypeAssignment_0_2.eContents().get(0);
		private final Assignment cStatusAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final Keyword cStatusRequiredKeyword_0_3_0 = (Keyword)cStatusAssignment_0_3.eContents().get(0);
		private final Assignment cUniqueKeyAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final Keyword cUniqueKeyUniqueKeyword_0_4_0 = (Keyword)cUniqueKeyAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRefKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRefCollectionAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cRefCollectionCollectionSchemaCrossReference_1_3_0 = (CrossReference)cRefCollectionAssignment_1_3.eContents().get(0);
		private final RuleCall cRefCollectionCollectionSchemaIDTerminalRuleCall_1_3_0_1 = (RuleCall)cRefCollectionCollectionSchemaCrossReference_1_3_0.eContents().get(1);
		
		//CollectionFieldDefination:
		//  name=ID ':' fieldType=FieldType (status?="required")? (uniqueKey?='unique')?
		//  | name=ID ':' 'ref' refCollection=[CollectionSchema | ID];
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' fieldType=FieldType (status?="required")? (uniqueKey?='unique')?
		//| name=ID ':' 'ref' refCollection=[CollectionSchema | ID]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=ID ':' fieldType=FieldType (status?="required")? (uniqueKey?='unique')?
		public Group getGroup_0() { return cGroup_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//fieldType=FieldType
		public Assignment getFieldTypeAssignment_0_2() { return cFieldTypeAssignment_0_2; }
		
		//FieldType
		public RuleCall getFieldTypeFieldTypeEnumRuleCall_0_2_0() { return cFieldTypeFieldTypeEnumRuleCall_0_2_0; }
		
		//(status?="required")?
		public Assignment getStatusAssignment_0_3() { return cStatusAssignment_0_3; }
		
		//"required"
		public Keyword getStatusRequiredKeyword_0_3_0() { return cStatusRequiredKeyword_0_3_0; }
		
		//(uniqueKey?='unique')?
		public Assignment getUniqueKeyAssignment_0_4() { return cUniqueKeyAssignment_0_4; }
		
		//'unique'
		public Keyword getUniqueKeyUniqueKeyword_0_4_0() { return cUniqueKeyUniqueKeyword_0_4_0; }
		
		//name=ID ':' 'ref' refCollection=[CollectionSchema | ID]
		public Group getGroup_1() { return cGroup_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//'ref'
		public Keyword getRefKeyword_1_2() { return cRefKeyword_1_2; }
		
		//refCollection=[CollectionSchema | ID]
		public Assignment getRefCollectionAssignment_1_3() { return cRefCollectionAssignment_1_3; }
		
		//[CollectionSchema | ID]
		public CrossReference getRefCollectionCollectionSchemaCrossReference_1_3_0() { return cRefCollectionCollectionSchemaCrossReference_1_3_0; }
		
		//ID
		public RuleCall getRefCollectionCollectionSchemaIDTerminalRuleCall_1_3_0_1() { return cRefCollectionCollectionSchemaIDTerminalRuleCall_1_3_0_1; }
	}
	public class CRUDOperationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CRUDOperations");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTaskKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Keyword cOperationKeyword_0_3_1 = (Keyword)cGroup_0_3.eContents().get(1);
		private final Assignment cTypeAssignment_0_3_2 = (Assignment)cGroup_0_3.eContents().get(2);
		private final RuleCall cTypeOperationEnumRuleCall_0_3_2_0 = (RuleCall)cTypeAssignment_0_3_2.eContents().get(0);
		private final Keyword cCommaKeyword_0_3_3 = (Keyword)cGroup_0_3.eContents().get(3);
		private final Keyword cCollectionKeyword_0_3_4 = (Keyword)cGroup_0_3.eContents().get(4);
		private final Assignment cCollectionAssignment_0_3_5 = (Assignment)cGroup_0_3.eContents().get(5);
		private final CrossReference cCollectionCollectionSchemaCrossReference_0_3_5_0 = (CrossReference)cCollectionAssignment_0_3_5.eContents().get(0);
		private final RuleCall cCollectionCollectionSchemaIDTerminalRuleCall_0_3_5_0_1 = (RuleCall)cCollectionCollectionSchemaCrossReference_0_3_5_0.eContents().get(1);
		private final Keyword cInputKeyword_0_3_6 = (Keyword)cGroup_0_3.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_0_3_7 = (Keyword)cGroup_0_3.eContents().get(7);
		private final Group cGroup_0_3_8 = (Group)cGroup_0_3.eContents().get(8);
		private final Assignment cEntriesAssignment_0_3_8_0 = (Assignment)cGroup_0_3_8.eContents().get(0);
		private final RuleCall cEntriesCollectionEntryParserRuleCall_0_3_8_0_0 = (RuleCall)cEntriesAssignment_0_3_8_0.eContents().get(0);
		private final Group cGroup_0_3_8_1 = (Group)cGroup_0_3_8.eContents().get(1);
		private final Keyword cCommaKeyword_0_3_8_1_0 = (Keyword)cGroup_0_3_8_1.eContents().get(0);
		private final Assignment cEntriesAssignment_0_3_8_1_1 = (Assignment)cGroup_0_3_8_1.eContents().get(1);
		private final RuleCall cEntriesCollectionEntryParserRuleCall_0_3_8_1_1_0 = (RuleCall)cEntriesAssignment_0_3_8_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_3_9 = (Keyword)cGroup_0_3.eContents().get(9);
		private final Keyword cRightCurlyBracketKeyword_0_3_10 = (Keyword)cGroup_0_3.eContents().get(10);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTaskKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Keyword cOperationKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cUpdateOperationAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final Keyword cUpdateOperationUPDATEKeyword_1_3_2_0 = (Keyword)cUpdateOperationAssignment_1_3_2.eContents().get(0);
		private final Keyword cCollectionKeyword_1_3_3 = (Keyword)cGroup_1_3.eContents().get(3);
		private final Assignment cCollectionAssignment_1_3_4 = (Assignment)cGroup_1_3.eContents().get(4);
		private final CrossReference cCollectionCollectionSchemaCrossReference_1_3_4_0 = (CrossReference)cCollectionAssignment_1_3_4.eContents().get(0);
		private final RuleCall cCollectionCollectionSchemaIDTerminalRuleCall_1_3_4_0_1 = (RuleCall)cCollectionCollectionSchemaCrossReference_1_3_4_0.eContents().get(1);
		private final Keyword cInputKeyword_1_3_5 = (Keyword)cGroup_1_3.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_1_3_6 = (Keyword)cGroup_1_3.eContents().get(6);
		private final Assignment cCriteriaAssignment_1_3_7 = (Assignment)cGroup_1_3.eContents().get(7);
		private final RuleCall cCriteriaCollectionEntryParserRuleCall_1_3_7_0 = (RuleCall)cCriteriaAssignment_1_3_7.eContents().get(0);
		private final Group cGroup_1_3_8 = (Group)cGroup_1_3.eContents().get(8);
		private final Keyword cCommaKeyword_1_3_8_0 = (Keyword)cGroup_1_3_8.eContents().get(0);
		private final Assignment cCriteriaAssignment_1_3_8_1 = (Assignment)cGroup_1_3_8.eContents().get(1);
		private final RuleCall cCriteriaCollectionEntryParserRuleCall_1_3_8_1_0 = (RuleCall)cCriteriaAssignment_1_3_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketCommaKeyword_1_3_9 = (Keyword)cGroup_1_3.eContents().get(9);
		private final Keyword cUpdateKeyword_1_3_10 = (Keyword)cGroup_1_3.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_1_3_11 = (Keyword)cGroup_1_3.eContents().get(11);
		private final Assignment cEntriesAssignment_1_3_12 = (Assignment)cGroup_1_3.eContents().get(12);
		private final RuleCall cEntriesCollectionEntryParserRuleCall_1_3_12_0 = (RuleCall)cEntriesAssignment_1_3_12.eContents().get(0);
		private final Group cGroup_1_3_13 = (Group)cGroup_1_3.eContents().get(13);
		private final Keyword cCommaKeyword_1_3_13_0 = (Keyword)cGroup_1_3_13.eContents().get(0);
		private final Assignment cEntriesAssignment_1_3_13_1 = (Assignment)cGroup_1_3_13.eContents().get(1);
		private final RuleCall cEntriesCollectionEntryParserRuleCall_1_3_13_1_0 = (RuleCall)cEntriesAssignment_1_3_13_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3_14 = (Keyword)cGroup_1_3.eContents().get(14);
		private final Keyword cRightCurlyBracketKeyword_1_3_15 = (Keyword)cGroup_1_3.eContents().get(15);
		
		//CRUDOperations:
		//  ('task'name=ID ':'( '{'
		//    'operation:' type=Operation ','
		//    'collection:' collection=[CollectionSchema]
		//    'input:' '{'
		//      (entries+=CollectionEntry (',' entries+=CollectionEntry)*)?
		//    '}'
		//  '}') )| ('task'name=ID ':'( '{'
		//    'operation:' updateOperation='UPDATE'
		//    'collection:' collection=[CollectionSchema]
		//    'input:' '{'
		//      criteria+=CollectionEntry (',' criteria+=CollectionEntry)*
		//    '},'
		//    'update:''{'
		//      entries+=CollectionEntry (',' entries+=CollectionEntry)*
		//    '}'
		//  '}'));
		@Override public ParserRule getRule() { return rule; }
		
		//('task'name=ID ':'( '{'
		//  'operation:' type=Operation ','
		//  'collection:' collection=[CollectionSchema]
		//  'input:' '{'
		//    (entries+=CollectionEntry (',' entries+=CollectionEntry)*)?
		//  '}'
		//'}') )| ('task'name=ID ':'( '{'
		//  'operation:' updateOperation='UPDATE'
		//  'collection:' collection=[CollectionSchema]
		//  'input:' '{'
		//    criteria+=CollectionEntry (',' criteria+=CollectionEntry)*
		//  '},'
		//  'update:''{'
		//    entries+=CollectionEntry (',' entries+=CollectionEntry)*
		//  '}'
		//'}'))
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('task'name=ID ':'( '{'
		//  'operation:' type=Operation ','
		//  'collection:' collection=[CollectionSchema]
		//  'input:' '{'
		//    (entries+=CollectionEntry (',' entries+=CollectionEntry)*)?
		//  '}'
		//'}') )
		public Group getGroup_0() { return cGroup_0; }
		
		//'task'
		public Keyword getTaskKeyword_0_0() { return cTaskKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }
		
		//( '{'
		//    'operation:' type=Operation ','
		//    'collection:' collection=[CollectionSchema]
		//    'input:' '{'
		//      (entries+=CollectionEntry (',' entries+=CollectionEntry)*)?
		//    '}'
		//  '}')
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_3_0() { return cLeftCurlyBracketKeyword_0_3_0; }
		
		//'operation:'
		public Keyword getOperationKeyword_0_3_1() { return cOperationKeyword_0_3_1; }
		
		//type=Operation
		public Assignment getTypeAssignment_0_3_2() { return cTypeAssignment_0_3_2; }
		
		//Operation
		public RuleCall getTypeOperationEnumRuleCall_0_3_2_0() { return cTypeOperationEnumRuleCall_0_3_2_0; }
		
		//','
		public Keyword getCommaKeyword_0_3_3() { return cCommaKeyword_0_3_3; }
		
		//'collection:'
		public Keyword getCollectionKeyword_0_3_4() { return cCollectionKeyword_0_3_4; }
		
		//collection=[CollectionSchema]
		public Assignment getCollectionAssignment_0_3_5() { return cCollectionAssignment_0_3_5; }
		
		//[CollectionSchema]
		public CrossReference getCollectionCollectionSchemaCrossReference_0_3_5_0() { return cCollectionCollectionSchemaCrossReference_0_3_5_0; }
		
		//ID
		public RuleCall getCollectionCollectionSchemaIDTerminalRuleCall_0_3_5_0_1() { return cCollectionCollectionSchemaIDTerminalRuleCall_0_3_5_0_1; }
		
		//'input:'
		public Keyword getInputKeyword_0_3_6() { return cInputKeyword_0_3_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_3_7() { return cLeftCurlyBracketKeyword_0_3_7; }
		
		//(entries+=CollectionEntry (',' entries+=CollectionEntry)*)?
		public Group getGroup_0_3_8() { return cGroup_0_3_8; }
		
		//entries+=CollectionEntry
		public Assignment getEntriesAssignment_0_3_8_0() { return cEntriesAssignment_0_3_8_0; }
		
		//CollectionEntry
		public RuleCall getEntriesCollectionEntryParserRuleCall_0_3_8_0_0() { return cEntriesCollectionEntryParserRuleCall_0_3_8_0_0; }
		
		//(',' entries+=CollectionEntry)*
		public Group getGroup_0_3_8_1() { return cGroup_0_3_8_1; }
		
		//','
		public Keyword getCommaKeyword_0_3_8_1_0() { return cCommaKeyword_0_3_8_1_0; }
		
		//entries+=CollectionEntry
		public Assignment getEntriesAssignment_0_3_8_1_1() { return cEntriesAssignment_0_3_8_1_1; }
		
		//CollectionEntry
		public RuleCall getEntriesCollectionEntryParserRuleCall_0_3_8_1_1_0() { return cEntriesCollectionEntryParserRuleCall_0_3_8_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_3_9() { return cRightCurlyBracketKeyword_0_3_9; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_3_10() { return cRightCurlyBracketKeyword_0_3_10; }
		
		//('task'name=ID ':'( '{'
		//   'operation:' updateOperation='UPDATE'
		//   'collection:' collection=[CollectionSchema]
		//   'input:' '{'
		//     criteria+=CollectionEntry (',' criteria+=CollectionEntry)*
		//   '},'
		//   'update:''{'
		//     entries+=CollectionEntry (',' entries+=CollectionEntry)*
		//   '}'
		// '}'))
		public Group getGroup_1() { return cGroup_1; }
		
		//'task'
		public Keyword getTaskKeyword_1_0() { return cTaskKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//( '{'
		//    'operation:' updateOperation='UPDATE'
		//    'collection:' collection=[CollectionSchema]
		//    'input:' '{'
		//      criteria+=CollectionEntry (',' criteria+=CollectionEntry)*
		//    '},'
		//    'update:''{'
		//      entries+=CollectionEntry (',' entries+=CollectionEntry)*
		//    '}'
		//  '}')
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_3_0() { return cLeftCurlyBracketKeyword_1_3_0; }
		
		//'operation:'
		public Keyword getOperationKeyword_1_3_1() { return cOperationKeyword_1_3_1; }
		
		//updateOperation='UPDATE'
		public Assignment getUpdateOperationAssignment_1_3_2() { return cUpdateOperationAssignment_1_3_2; }
		
		//'UPDATE'
		public Keyword getUpdateOperationUPDATEKeyword_1_3_2_0() { return cUpdateOperationUPDATEKeyword_1_3_2_0; }
		
		//'collection:'
		public Keyword getCollectionKeyword_1_3_3() { return cCollectionKeyword_1_3_3; }
		
		//collection=[CollectionSchema]
		public Assignment getCollectionAssignment_1_3_4() { return cCollectionAssignment_1_3_4; }
		
		//[CollectionSchema]
		public CrossReference getCollectionCollectionSchemaCrossReference_1_3_4_0() { return cCollectionCollectionSchemaCrossReference_1_3_4_0; }
		
		//ID
		public RuleCall getCollectionCollectionSchemaIDTerminalRuleCall_1_3_4_0_1() { return cCollectionCollectionSchemaIDTerminalRuleCall_1_3_4_0_1; }
		
		//'input:'
		public Keyword getInputKeyword_1_3_5() { return cInputKeyword_1_3_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_3_6() { return cLeftCurlyBracketKeyword_1_3_6; }
		
		//criteria+=CollectionEntry
		public Assignment getCriteriaAssignment_1_3_7() { return cCriteriaAssignment_1_3_7; }
		
		//CollectionEntry
		public RuleCall getCriteriaCollectionEntryParserRuleCall_1_3_7_0() { return cCriteriaCollectionEntryParserRuleCall_1_3_7_0; }
		
		//(',' criteria+=CollectionEntry)*
		public Group getGroup_1_3_8() { return cGroup_1_3_8; }
		
		//','
		public Keyword getCommaKeyword_1_3_8_0() { return cCommaKeyword_1_3_8_0; }
		
		//criteria+=CollectionEntry
		public Assignment getCriteriaAssignment_1_3_8_1() { return cCriteriaAssignment_1_3_8_1; }
		
		//CollectionEntry
		public RuleCall getCriteriaCollectionEntryParserRuleCall_1_3_8_1_0() { return cCriteriaCollectionEntryParserRuleCall_1_3_8_1_0; }
		
		//'},'
		public Keyword getRightCurlyBracketCommaKeyword_1_3_9() { return cRightCurlyBracketCommaKeyword_1_3_9; }
		
		//'update:'
		public Keyword getUpdateKeyword_1_3_10() { return cUpdateKeyword_1_3_10; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_3_11() { return cLeftCurlyBracketKeyword_1_3_11; }
		
		//entries+=CollectionEntry
		public Assignment getEntriesAssignment_1_3_12() { return cEntriesAssignment_1_3_12; }
		
		//CollectionEntry
		public RuleCall getEntriesCollectionEntryParserRuleCall_1_3_12_0() { return cEntriesCollectionEntryParserRuleCall_1_3_12_0; }
		
		//(',' entries+=CollectionEntry)*
		public Group getGroup_1_3_13() { return cGroup_1_3_13; }
		
		//','
		public Keyword getCommaKeyword_1_3_13_0() { return cCommaKeyword_1_3_13_0; }
		
		//entries+=CollectionEntry
		public Assignment getEntriesAssignment_1_3_13_1() { return cEntriesAssignment_1_3_13_1; }
		
		//CollectionEntry
		public RuleCall getEntriesCollectionEntryParserRuleCall_1_3_13_1_0() { return cEntriesCollectionEntryParserRuleCall_1_3_13_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3_14() { return cRightCurlyBracketKeyword_1_3_14; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3_15() { return cRightCurlyBracketKeyword_1_3_15; }
	}
	public class CollectionEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CollectionEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueNameIDTerminalRuleCall_0_0 = (RuleCall)cValueNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueStringAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueStringSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cValueStringAssignment_2_0.eContents().get(0);
		private final Assignment cValueIntAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cValueIntINTTerminalRuleCall_2_1_0 = (RuleCall)cValueIntAssignment_2_1.eContents().get(0);
		
		//CollectionEntry:
		//  valueName=ID ':' (valueString=STRING | valueInt=INT);
		@Override public ParserRule getRule() { return rule; }
		
		//valueName=ID ':' (valueString=STRING | valueInt=INT)
		public Group getGroup() { return cGroup; }
		
		//valueName=ID
		public Assignment getValueNameAssignment_0() { return cValueNameAssignment_0; }
		
		//ID
		public RuleCall getValueNameIDTerminalRuleCall_0_0() { return cValueNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(valueString=STRING | valueInt=INT)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//valueString=STRING
		public Assignment getValueStringAssignment_2_0() { return cValueStringAssignment_2_0; }
		
		//STRING
		public RuleCall getValueStringSTRINGTerminalRuleCall_2_0_0() { return cValueStringSTRINGTerminalRuleCall_2_0_0; }
		
		//valueInt=INT
		public Assignment getValueIntAssignment_2_1() { return cValueIntAssignment_2_1; }
		
		//INT
		public RuleCall getValueIntINTTerminalRuleCall_2_1_0() { return cValueIntINTTerminalRuleCall_2_1_0; }
	}
	
	public class OperationElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGETEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGETGETKeyword_0_0 = (Keyword)cGETEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDELETEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDELETEDELETEKeyword_1_0 = (Keyword)cDELETEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINSERTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINSERTINSERTKeyword_2_0 = (Keyword)cINSERTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Operation:
		//  GET='GET' | DELETE='DELETE' | INSERT='INSERT';
		public EnumRule getRule() { return rule; }
		
		//GET='GET' | DELETE='DELETE' | INSERT='INSERT'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GET='GET'
		public EnumLiteralDeclaration getGETEnumLiteralDeclaration_0() { return cGETEnumLiteralDeclaration_0; }
		
		//'GET'
		public Keyword getGETGETKeyword_0_0() { return cGETGETKeyword_0_0; }
		
		//DELETE='DELETE'
		public EnumLiteralDeclaration getDELETEEnumLiteralDeclaration_1() { return cDELETEEnumLiteralDeclaration_1; }
		
		//'DELETE'
		public Keyword getDELETEDELETEKeyword_1_0() { return cDELETEDELETEKeyword_1_0; }
		
		//INSERT='INSERT'
		public EnumLiteralDeclaration getINSERTEnumLiteralDeclaration_2() { return cINSERTEnumLiteralDeclaration_2; }
		
		//'INSERT'
		public Keyword getINSERTINSERTKeyword_2_0() { return cINSERTINSERTKeyword_2_0; }
	}
	public class FieldTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FieldType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNumberEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNumberNumberKeyword_1_0 = (Keyword)cNumberEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBooleanBooleanKeyword_2_0 = (Keyword)cBooleanEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDateDateKeyword_3_0 = (Keyword)cDateEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum FieldType:
		//  string = 'String' | number='Number' | boolean='Boolean'| date='Date';
		public EnumRule getRule() { return rule; }
		
		//string = 'String' | number='Number' | boolean='Boolean'| date='Date'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//string = 'String'
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }
		
		//'String'
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }
		
		//number='Number'
		public EnumLiteralDeclaration getNumberEnumLiteralDeclaration_1() { return cNumberEnumLiteralDeclaration_1; }
		
		//'Number'
		public Keyword getNumberNumberKeyword_1_0() { return cNumberNumberKeyword_1_0; }
		
		//boolean='Boolean'
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_2() { return cBooleanEnumLiteralDeclaration_2; }
		
		//'Boolean'
		public Keyword getBooleanBooleanKeyword_2_0() { return cBooleanBooleanKeyword_2_0; }
		
		//date='Date'
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_3() { return cDateEnumLiteralDeclaration_3; }
		
		//'Date'
		public Keyword getDateDateKeyword_3_0() { return cDateDateKeyword_3_0; }
	}
	
	private final MongoDBElements pMongoDB;
	private final ModelElements pModel;
	private final CRUDOperationAndCollectionSchemaElements pCRUDOperationAndCollectionSchema;
	private final ConnectionStatementElements pConnectionStatement;
	private final CollectionSchemaElements pCollectionSchema;
	private final CollectionFieldDefinationElements pCollectionFieldDefination;
	private final CRUDOperationsElements pCRUDOperations;
	private final CollectionEntryElements pCollectionEntry;
	private final OperationElements eOperation;
	private final FieldTypeElements eFieldType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMongoDB = new MongoDBElements();
		this.pModel = new ModelElements();
		this.pCRUDOperationAndCollectionSchema = new CRUDOperationAndCollectionSchemaElements();
		this.pConnectionStatement = new ConnectionStatementElements();
		this.pCollectionSchema = new CollectionSchemaElements();
		this.pCollectionFieldDefination = new CollectionFieldDefinationElements();
		this.pCRUDOperations = new CRUDOperationsElements();
		this.pCollectionEntry = new CollectionEntryElements();
		this.eOperation = new OperationElements();
		this.eFieldType = new FieldTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MongoDB:
	//    models += Model*;
	public MongoDBElements getMongoDBAccess() {
		return pMongoDB;
	}
	
	public ParserRule getMongoDBRule() {
		return getMongoDBAccess().getRule();
	}
	
	//Model:
	//  connection=ConnectionStatement
	//  statements+=CRUDOperationAndCollectionSchema*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//CRUDOperationAndCollectionSchema:
	//  schema=CollectionSchema operations+=CRUDOperations* ;
	public CRUDOperationAndCollectionSchemaElements getCRUDOperationAndCollectionSchemaAccess() {
		return pCRUDOperationAndCollectionSchema;
	}
	
	public ParserRule getCRUDOperationAndCollectionSchemaRule() {
		return getCRUDOperationAndCollectionSchemaAccess().getRule();
	}
	
	//ConnectionStatement:
	//  'DatabaseParameters' '{'
	//  'Connection' connectionString=STRING ','&
	//    'databaseName' databaseName=STRING
	//  '}';
	public ConnectionStatementElements getConnectionStatementAccess() {
		return pConnectionStatement;
	}
	
	public ParserRule getConnectionStatementRule() {
		return getConnectionStatementAccess().getRule();
	}
	
	//CollectionSchema:
	//  'Collection' name=ID
	//  '{'
	//    (defination+=CollectionFieldDefination (',' defination+=CollectionFieldDefination)*)?
	//  '}';
	public CollectionSchemaElements getCollectionSchemaAccess() {
		return pCollectionSchema;
	}
	
	public ParserRule getCollectionSchemaRule() {
		return getCollectionSchemaAccess().getRule();
	}
	
	//CollectionFieldDefination:
	//  name=ID ':' fieldType=FieldType (status?="required")? (uniqueKey?='unique')?
	//  | name=ID ':' 'ref' refCollection=[CollectionSchema | ID];
	public CollectionFieldDefinationElements getCollectionFieldDefinationAccess() {
		return pCollectionFieldDefination;
	}
	
	public ParserRule getCollectionFieldDefinationRule() {
		return getCollectionFieldDefinationAccess().getRule();
	}
	
	//CRUDOperations:
	//  ('task'name=ID ':'( '{'
	//    'operation:' type=Operation ','
	//    'collection:' collection=[CollectionSchema]
	//    'input:' '{'
	//      (entries+=CollectionEntry (',' entries+=CollectionEntry)*)?
	//    '}'
	//  '}') )| ('task'name=ID ':'( '{'
	//    'operation:' updateOperation='UPDATE'
	//    'collection:' collection=[CollectionSchema]
	//    'input:' '{'
	//      criteria+=CollectionEntry (',' criteria+=CollectionEntry)*
	//    '},'
	//    'update:''{'
	//      entries+=CollectionEntry (',' entries+=CollectionEntry)*
	//    '}'
	//  '}'));
	public CRUDOperationsElements getCRUDOperationsAccess() {
		return pCRUDOperations;
	}
	
	public ParserRule getCRUDOperationsRule() {
		return getCRUDOperationsAccess().getRule();
	}
	
	//CollectionEntry:
	//  valueName=ID ':' (valueString=STRING | valueInt=INT);
	public CollectionEntryElements getCollectionEntryAccess() {
		return pCollectionEntry;
	}
	
	public ParserRule getCollectionEntryRule() {
		return getCollectionEntryAccess().getRule();
	}
	
	//enum Operation:
	//  GET='GET' | DELETE='DELETE' | INSERT='INSERT';
	public OperationElements getOperationAccess() {
		return eOperation;
	}
	
	public EnumRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//enum FieldType:
	//  string = 'String' | number='Number' | boolean='Boolean'| date='Date';
	public FieldTypeElements getFieldTypeAccess() {
		return eFieldType;
	}
	
	public EnumRule getFieldTypeRule() {
		return getFieldTypeAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
