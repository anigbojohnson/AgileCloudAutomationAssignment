package retake

import com.mongodb.client.model.Aggregates
import com.mongodb.client.model.Accumulators
import com.google.gson.Gson
import com.google.gson.GsonBuilder
import com.mongodb.MongoClientSettings
import com.mongodb.ServerAddress
import com.mongodb.client.MongoClients
import com.mongodb.client.MongoCollection
import com.mongodb.client.MongoCursor
import com.mongodb.client.model.Projections
import com.mongodb.client.model.Filters
import org.bson.Document
import org.bson.conversions.Bson
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import com.mongodb.client.model.Sorts

class ExcerciseFivePartA {
	def static connectionString = "mongodb+srv://anigbojohnsona:Sonship123@cluster0.kybkuyh.mongodb.net/ReatakeAgileCloudAuthomation?retryWrites=true&w=majority"
	
	static void main(String[] args) {
		       def startTime = System.currentTimeMillis()
		
	   
			   // Connect to the MongoDB server using the connection string
			   def mongoClient = MongoClients.create(connectionString)
	   
			   // Access a specific database
			   def database = mongoClient.getDatabase("ReatakeAgileCloudAuthomation")
	   
			   // Access a specific collection in the database
			   def collection = database.getCollection("currency-extended")
			   
			   
			   
			   println("All country currency in the world per doller:")
			 //  println(currenciesPerformanceQuery(collection ))  
			   println("\n")
			   
			   
			   println("All country currency in the world per doller:")
			    println(currenciesDescriptionQuery(collection ))
			   println("\n")
			   
			   
			   def endTime = System.currentTimeMillis()
			   def elapsedTime = endTime - startTime
			   println "Elapsed time: ${elapsedTime} milliseconds"	  
		   }
	static String currenciesPerformanceQuery(MongoCollection<Document> collection) {
		def cacheKey = "currenciesPerformance"
		
		MongoDBCache cache = new MongoDBCache(connectionString, "ReatakeAgileCloudAuthomation", "cache_collection");
		
		  //    collection.createIndex(new Document("code", 1))
		   //   collection.createIndex(new Document("rate_to_usd", 1))
			   
			   def formattedTable = new StringBuilder()
			   formattedTable.append(String.format("| %-35s | %-20s |%-20s |%-20s |\n", "Country","Code","Continent", "Lowest Rate"))
			   formattedTable.append("|-----------------------------------|--------------------|--------------------|--------------------|\n")
			   def cachedResult = cache.get(cacheKey)
			   
			   if (cachedResult != null) {
				   // Parse the JSON string into a Groovy object
				   def jsonSlurper = new JsonSlurper()
				   def cacheddata = jsonSlurper.parseText(cachedResult)	   
				   cacheddata.each { item ->
					   formattedTable.append(String.format("| %-35s | %-20s | %-20s | %-20s |\n", item.country, item.code, item.continent, item.lowestRate))	  
					   }
				   return  formattedTable.toString()	   			   
			   }
			   // Execute the aggregation pipeline
			List<Bson> pipeline = Arrays.asList(
    // Group by currency code
    Aggregates.group(
        new Document("code", "\$code"),
        Accumulators.min("lowestRate", "\$rate_to_usd"),
    ),
    // Project to reshape the output document
	Aggregates.sort(Sorts.ascending("_id.code")),
    Aggregates.project(
        Projections.fields(
            Projections.include("lowestRate","minDocument")
        )
    )
 );
	List<Document> results = collection.aggregate(pipeline).into(new ArrayList<>());
	def data=[]

// Print the results
	results.each { result ->
		def code = result._id.code
		def lowestRate = result.get("lowestRate")
	
	// Query the collection again to find the document with the specified code and lowest rate
		Document dateResult = collection.find(
			Filters.and(
			Filters.eq("code", code),
			Filters.eq("rate_to_usd", lowestRate)
		)
	).first()
	
	def documentData = [:]
	documentData['country'] = dateResult.country
	documentData['lowestRate'] = lowestRate
	documentData['code'] = code
	documentData['continent'] = dateResult.continent
	
	// Add the map to the list
	data.add(documentData)
	formattedTable.append(String.format("| %-35s | %-20s | %-20s | %-20s |\n", dateResult.country, code, dateResult.continent, lowestRate))
	
	}
	
	
	def result = JsonOutput.toJson(data)
	cache.put(cacheKey, result, 60)
	return formattedTable.toString()
	
	}
	
	
	static String documentsWithDescription(MongoCollection<Document> collection) {
		Gson gson = new GsonBuilder().setPrettyPrinting().create()
		
		MongoDBCache cache = new MongoDBCache(connectionString, "ReatakeAgileCloudAuthomation", "cache_collection")
		def cacheKey = "documentsWithDescription"
		def cachedResult = cache.get(cacheKey)
		
		if (cachedResult != null) {
			return gson.toJson(cachedResult)
		}
		
		// Create index on 'description' field if needed
		collection.createIndex(new Document("description", 1))
		
		def formattedTable = new StringBuilder()
		formattedTable.append(String.format("| %-35s | %-50s  |\n", "Country", "Description"))
		formattedTable.append("|-------------------------------------|---------------------------------------------------|\n")
		
		def countryDescriptionMap = new LinkedHashMap() // Changed to LinkedHashMap to preserve insertion order
		
		// Find documents where the 'description' field exists
		def cursor = collection.find(Filters.exists("description")).iterator()
		try {
			def data = []
			while (cursor.hasNext()) {
				def document = cursor.next()
				def country = document.getString("country")
				def description = document.getString("description")
				if (description != null) {
					def documentData = [:]
					documentData['country'] = country
					documentData['description'] = description
					
					// Add the map to the list
					data.add(documentData)
				}
			}
			return gson.toJson(data)
		} finally {
			cursor.close()
		}
	}
	
	
	
}
