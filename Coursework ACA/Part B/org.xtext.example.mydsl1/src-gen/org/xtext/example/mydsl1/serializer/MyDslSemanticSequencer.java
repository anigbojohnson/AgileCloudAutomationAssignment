/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl1.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.example.mydsl1.myDsl.ConnectionStatement;
import org.xtext.example.mydsl1.myDsl.DictionaryEntry;
import org.xtext.example.mydsl1.myDsl.MakeStatement;
import org.xtext.example.mydsl1.myDsl.Model;
import org.xtext.example.mydsl1.myDsl.MongoDB;
import org.xtext.example.mydsl1.myDsl.MyDslPackage;
import org.xtext.example.mydsl1.myDsl.OperationStatement;
import org.xtext.example.mydsl1.myDsl.OtherOperationStatement;
import org.xtext.example.mydsl1.myDsl.TaskDictionaryEntry;
import org.xtext.example.mydsl1.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.CONNECTION_STATEMENT:
				sequence_ConnectionStatement(context, (ConnectionStatement) semanticObject); 
				return; 
			case MyDslPackage.DICTIONARY_ENTRY:
				sequence_DictionaryEntry(context, (DictionaryEntry) semanticObject); 
				return; 
			case MyDslPackage.MAKE_STATEMENT:
				sequence_MakeStatement(context, (MakeStatement) semanticObject); 
				return; 
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.MONGO_DB:
				sequence_MongoDB(context, (MongoDB) semanticObject); 
				return; 
			case MyDslPackage.OPERATION_STATEMENT:
				sequence_OperationStatement(context, (OperationStatement) semanticObject); 
				return; 
			case MyDslPackage.OTHER_OPERATION_STATEMENT:
				sequence_OtherOperationStatement(context, (OtherOperationStatement) semanticObject); 
				return; 
			case MyDslPackage.TASK_DICTIONARY_ENTRY:
				sequence_TaskDictionaryEntry(context, (TaskDictionaryEntry) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConnectionStatement returns ConnectionStatement
	 *
	 * Constraint:
	 *     (connectionString=STRING | database=STRING)+
	 * </pre>
	 */
	protected void sequence_ConnectionStatement(ISerializationContext context, ConnectionStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DictionaryEntry returns DictionaryEntry
	 *
	 * Constraint:
	 *     ((name=ID fieldType=FieldType status?='required'? uniqueKey?='unique'?) | (name=ID refDictionary=[MakeStatement|ID]))
	 * </pre>
	 */
	protected void sequence_DictionaryEntry(ISerializationContext context, DictionaryEntry semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MakeStatement returns MakeStatement
	 *
	 * Constraint:
	 *     (name=ID (entries+=DictionaryEntry entries+=DictionaryEntry*)?)
	 * </pre>
	 */
	protected void sequence_MakeStatement(ISerializationContext context, MakeStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (connection=ConnectionStatement statements+=OperationStatement*)
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MongoDB returns MongoDB
	 *
	 * Constraint:
	 *     models+=Model+
	 * </pre>
	 */
	protected void sequence_MongoDB(ISerializationContext context, MongoDB semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     OperationStatement returns OperationStatement
	 *
	 * Constraint:
	 *     (schema=MakeStatement operations+=OtherOperationStatement*)
	 * </pre>
	 */
	protected void sequence_OperationStatement(ISerializationContext context, OperationStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     OtherOperationStatement returns OtherOperationStatement
	 *
	 * Constraint:
	 *     (
	 *         (type=Operation collection=[MakeStatement|ID] (entries+=TaskDictionaryEntry entries+=TaskDictionaryEntry*)?) | 
	 *         (
	 *             type='UPDATE,' 
	 *             collection=[MakeStatement|ID] 
	 *             (entries+=TaskDictionaryEntry entries+=TaskDictionaryEntry*)? 
	 *             (entries+=TaskDictionaryEntry entries+=TaskDictionaryEntry*)?
	 *         )
	 *     )
	 * </pre>
	 */
	protected void sequence_OtherOperationStatement(ISerializationContext context, OtherOperationStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TaskDictionaryEntry returns TaskDictionaryEntry
	 *
	 * Constraint:
	 *     (valueName=ID (valueString=STRING | valueInt=INT))
	 * </pre>
	 */
	protected void sequence_TaskDictionaryEntry(ISerializationContext context, TaskDictionaryEntry semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
