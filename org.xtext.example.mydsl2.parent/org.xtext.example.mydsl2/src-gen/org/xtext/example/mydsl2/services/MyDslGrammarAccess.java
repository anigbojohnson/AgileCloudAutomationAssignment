/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl2.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MongoDBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.MongoDB");
		private final Assignment cModelsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cModelsModelParserRuleCall_0 = (RuleCall)cModelsAssignment.eContents().get(0);
		
		//MongoDB:
		//    models += Model*;
		@Override public ParserRule getRule() { return rule; }
		
		//models += Model*
		public Assignment getModelsAssignment() { return cModelsAssignment; }
		
		//Model
		public RuleCall getModelsModelParserRuleCall_0() { return cModelsModelParserRuleCall_0; }
	}
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConnectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConnectionConnectionStatementParserRuleCall_0_0 = (RuleCall)cConnectionAssignment_0.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsOperationStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//Model:
		//  connection=ConnectionStatement
		//  statements+=OperationStatement*;
		@Override public ParserRule getRule() { return rule; }
		
		//connection=ConnectionStatement
		//statements+=OperationStatement*
		public Group getGroup() { return cGroup; }
		
		//connection=ConnectionStatement
		public Assignment getConnectionAssignment_0() { return cConnectionAssignment_0; }
		
		//ConnectionStatement
		public RuleCall getConnectionConnectionStatementParserRuleCall_0_0() { return cConnectionConnectionStatementParserRuleCall_0_0; }
		
		//statements+=OperationStatement*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//OperationStatement
		public RuleCall getStatementsOperationStatementParserRuleCall_1_0() { return cStatementsOperationStatementParserRuleCall_1_0; }
	}
	public class OperationStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.OperationStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSchemaAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSchemaMakeStatementParserRuleCall_0_0 = (RuleCall)cSchemaAssignment_0.eContents().get(0);
		private final Assignment cOperationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperationsOtherOperationStatementParserRuleCall_1_0 = (RuleCall)cOperationsAssignment_1.eContents().get(0);
		
		//OperationStatement:
		//  schema=MakeStatement operations+=OtherOperationStatement*;
		@Override public ParserRule getRule() { return rule; }
		
		//schema=MakeStatement operations+=OtherOperationStatement*
		public Group getGroup() { return cGroup; }
		
		//schema=MakeStatement
		public Assignment getSchemaAssignment_0() { return cSchemaAssignment_0; }
		
		//MakeStatement
		public RuleCall getSchemaMakeStatementParserRuleCall_0_0() { return cSchemaMakeStatementParserRuleCall_0_0; }
		
		//operations+=OtherOperationStatement*
		public Assignment getOperationsAssignment_1() { return cOperationsAssignment_1; }
		
		//OtherOperationStatement
		public RuleCall getOperationsOtherOperationStatementParserRuleCall_1_0() { return cOperationsOtherOperationStatementParserRuleCall_1_0; }
	}
	public class ConnectionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.ConnectionStatement");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cDatabaseParametersKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cConnectionKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cConnectionStringAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cConnectionStringSTRINGTerminalRuleCall_0_3_0 = (RuleCall)cConnectionStringAssignment_0_3.eContents().get(0);
		private final Keyword cCommaKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cDatabaseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDatabaseAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDatabaseSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cDatabaseAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ConnectionStatement:
		//  'DatabaseParameters' '{'
		//  'Connection' connectionString=STRING ','&
		//    'database' database=STRING
		//  '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DatabaseParameters' '{'
		//'Connection' connectionString=STRING ','&
		//  'database' database=STRING
		//'}'
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//'DatabaseParameters' '{'
		//'Connection' connectionString=STRING ','
		public Group getGroup_0() { return cGroup_0; }
		
		//'DatabaseParameters'
		public Keyword getDatabaseParametersKeyword_0_0() { return cDatabaseParametersKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }
		
		//'Connection'
		public Keyword getConnectionKeyword_0_2() { return cConnectionKeyword_0_2; }
		
		//connectionString=STRING
		public Assignment getConnectionStringAssignment_0_3() { return cConnectionStringAssignment_0_3; }
		
		//STRING
		public RuleCall getConnectionStringSTRINGTerminalRuleCall_0_3_0() { return cConnectionStringSTRINGTerminalRuleCall_0_3_0; }
		
		//','
		public Keyword getCommaKeyword_0_4() { return cCommaKeyword_0_4; }
		
		//  'database' database=STRING
		//'}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'database'
		public Keyword getDatabaseKeyword_1_0() { return cDatabaseKeyword_1_0; }
		
		//database=STRING
		public Assignment getDatabaseAssignment_1_1() { return cDatabaseAssignment_1_1; }
		
		//STRING
		public RuleCall getDatabaseSTRINGTerminalRuleCall_1_1_0() { return cDatabaseSTRINGTerminalRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class MakeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.MakeStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCollectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cEntriesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cEntriesDictionaryEntryParserRuleCall_3_0_0 = (RuleCall)cEntriesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cEntriesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cEntriesDictionaryEntryParserRuleCall_3_1_1_0 = (RuleCall)cEntriesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MakeStatement:
		//  'Collection' name=ID
		//  '{'
		//    (entries+=DictionaryEntry (',' entries+=DictionaryEntry)*)?
		//  '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Collection' name=ID
		//'{'
		//  (entries+=DictionaryEntry (',' entries+=DictionaryEntry)*)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Collection'
		public Keyword getCollectionKeyword_0() { return cCollectionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(entries+=DictionaryEntry (',' entries+=DictionaryEntry)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//entries+=DictionaryEntry
		public Assignment getEntriesAssignment_3_0() { return cEntriesAssignment_3_0; }
		
		//DictionaryEntry
		public RuleCall getEntriesDictionaryEntryParserRuleCall_3_0_0() { return cEntriesDictionaryEntryParserRuleCall_3_0_0; }
		
		//(',' entries+=DictionaryEntry)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//entries+=DictionaryEntry
		public Assignment getEntriesAssignment_3_1_1() { return cEntriesAssignment_3_1_1; }
		
		//DictionaryEntry
		public RuleCall getEntriesDictionaryEntryParserRuleCall_3_1_1_0() { return cEntriesDictionaryEntryParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DictionaryEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.DictionaryEntry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFieldTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cFieldTypeFieldTypeParserRuleCall_0_2_0 = (RuleCall)cFieldTypeAssignment_0_2.eContents().get(0);
		private final Assignment cStatusAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final Keyword cStatusRequiredKeyword_0_3_0 = (Keyword)cStatusAssignment_0_3.eContents().get(0);
		private final Assignment cUniqueKeyAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final Keyword cUniqueKeyUniqueKeyword_0_4_0 = (Keyword)cUniqueKeyAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRefKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRefDictionaryAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cRefDictionaryMakeStatementCrossReference_1_3_0 = (CrossReference)cRefDictionaryAssignment_1_3.eContents().get(0);
		private final RuleCall cRefDictionaryMakeStatementIDTerminalRuleCall_1_3_0_1 = (RuleCall)cRefDictionaryMakeStatementCrossReference_1_3_0.eContents().get(1);
		
		//DictionaryEntry:
		//  name=ID ':' fieldType=FieldType (status?="required")? (uniqueKey?='unique')?
		//  | name=ID ':' 'ref' refDictionary=[MakeStatement | ID];
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' fieldType=FieldType (status?="required")? (uniqueKey?='unique')?
		//| name=ID ':' 'ref' refDictionary=[MakeStatement | ID]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=ID ':' fieldType=FieldType (status?="required")? (uniqueKey?='unique')?
		public Group getGroup_0() { return cGroup_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//fieldType=FieldType
		public Assignment getFieldTypeAssignment_0_2() { return cFieldTypeAssignment_0_2; }
		
		//FieldType
		public RuleCall getFieldTypeFieldTypeParserRuleCall_0_2_0() { return cFieldTypeFieldTypeParserRuleCall_0_2_0; }
		
		//(status?="required")?
		public Assignment getStatusAssignment_0_3() { return cStatusAssignment_0_3; }
		
		//"required"
		public Keyword getStatusRequiredKeyword_0_3_0() { return cStatusRequiredKeyword_0_3_0; }
		
		//(uniqueKey?='unique')?
		public Assignment getUniqueKeyAssignment_0_4() { return cUniqueKeyAssignment_0_4; }
		
		//'unique'
		public Keyword getUniqueKeyUniqueKeyword_0_4_0() { return cUniqueKeyUniqueKeyword_0_4_0; }
		
		//name=ID ':' 'ref' refDictionary=[MakeStatement | ID]
		public Group getGroup_1() { return cGroup_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//'ref'
		public Keyword getRefKeyword_1_2() { return cRefKeyword_1_2; }
		
		//refDictionary=[MakeStatement | ID]
		public Assignment getRefDictionaryAssignment_1_3() { return cRefDictionaryAssignment_1_3; }
		
		//[MakeStatement | ID]
		public CrossReference getRefDictionaryMakeStatementCrossReference_1_3_0() { return cRefDictionaryMakeStatementCrossReference_1_3_0; }
		
		//ID
		public RuleCall getRefDictionaryMakeStatementIDTerminalRuleCall_1_3_0_1() { return cRefDictionaryMakeStatementIDTerminalRuleCall_1_3_0_1; }
	}
	public class OtherOperationStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.OtherOperationStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTaskKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cOperationKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cTypeAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cTypeOperationParserRuleCall_0_1_2_0 = (RuleCall)cTypeAssignment_0_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Keyword cCollectionKeyword_0_1_4 = (Keyword)cGroup_0_1.eContents().get(4);
		private final Assignment cCollectionAssignment_0_1_5 = (Assignment)cGroup_0_1.eContents().get(5);
		private final CrossReference cCollectionMakeStatementCrossReference_0_1_5_0 = (CrossReference)cCollectionAssignment_0_1_5.eContents().get(0);
		private final RuleCall cCollectionMakeStatementIDTerminalRuleCall_0_1_5_0_1 = (RuleCall)cCollectionMakeStatementCrossReference_0_1_5_0.eContents().get(1);
		private final Keyword cInputKeyword_0_1_6 = (Keyword)cGroup_0_1.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_0_1_7 = (Keyword)cGroup_0_1.eContents().get(7);
		private final Group cGroup_0_1_8 = (Group)cGroup_0_1.eContents().get(8);
		private final Assignment cEntriesAssignment_0_1_8_0 = (Assignment)cGroup_0_1_8.eContents().get(0);
		private final RuleCall cEntriesTaskDictionaryEntryParserRuleCall_0_1_8_0_0 = (RuleCall)cEntriesAssignment_0_1_8_0.eContents().get(0);
		private final Group cGroup_0_1_8_1 = (Group)cGroup_0_1_8.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_8_1_0 = (Keyword)cGroup_0_1_8_1.eContents().get(0);
		private final Assignment cEntriesAssignment_0_1_8_1_1 = (Assignment)cGroup_0_1_8_1.eContents().get(1);
		private final RuleCall cEntriesTaskDictionaryEntryParserRuleCall_0_1_8_1_1_0 = (RuleCall)cEntriesAssignment_0_1_8_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_1_9 = (Keyword)cGroup_0_1.eContents().get(9);
		private final Keyword cRightCurlyBracketKeyword_0_1_10 = (Keyword)cGroup_0_1.eContents().get(10);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTaskKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cOperationKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final Keyword cTypeUPDATEKeyword_1_1_2_0 = (Keyword)cTypeAssignment_1_1_2.eContents().get(0);
		private final Keyword cCollectionKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cCollectionAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final CrossReference cCollectionMakeStatementCrossReference_1_1_4_0 = (CrossReference)cCollectionAssignment_1_1_4.eContents().get(0);
		private final RuleCall cCollectionMakeStatementIDTerminalRuleCall_1_1_4_0_1 = (RuleCall)cCollectionMakeStatementCrossReference_1_1_4_0.eContents().get(1);
		private final Keyword cInputKeyword_1_1_5 = (Keyword)cGroup_1_1.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_1_1_6 = (Keyword)cGroup_1_1.eContents().get(6);
		private final Group cGroup_1_1_7 = (Group)cGroup_1_1.eContents().get(7);
		private final Assignment cEntriesAssignment_1_1_7_0 = (Assignment)cGroup_1_1_7.eContents().get(0);
		private final RuleCall cEntriesTaskDictionaryEntryParserRuleCall_1_1_7_0_0 = (RuleCall)cEntriesAssignment_1_1_7_0.eContents().get(0);
		private final Group cGroup_1_1_7_1 = (Group)cGroup_1_1_7.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_7_1_0 = (Keyword)cGroup_1_1_7_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_7_1_1 = (Assignment)cGroup_1_1_7_1.eContents().get(1);
		private final RuleCall cEntriesTaskDictionaryEntryParserRuleCall_1_1_7_1_1_0 = (RuleCall)cEntriesAssignment_1_1_7_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_8 = (Keyword)cGroup_1_1.eContents().get(8);
		private final Group cGroup_1_1_9 = (Group)cGroup_1_1.eContents().get(9);
		private final Keyword cCommaKeyword_1_1_9_0 = (Keyword)cGroup_1_1_9.eContents().get(0);
		private final Keyword cUpdateKeyword_1_1_9_1 = (Keyword)cGroup_1_1_9.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_9_2 = (Keyword)cGroup_1_1_9.eContents().get(2);
		private final Group cGroup_1_1_9_3 = (Group)cGroup_1_1_9.eContents().get(3);
		private final Assignment cEntriesAssignment_1_1_9_3_0 = (Assignment)cGroup_1_1_9_3.eContents().get(0);
		private final RuleCall cEntriesTaskDictionaryEntryParserRuleCall_1_1_9_3_0_0 = (RuleCall)cEntriesAssignment_1_1_9_3_0.eContents().get(0);
		private final Group cGroup_1_1_9_3_1 = (Group)cGroup_1_1_9_3.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_9_3_1_0 = (Keyword)cGroup_1_1_9_3_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_9_3_1_1 = (Assignment)cGroup_1_1_9_3_1.eContents().get(1);
		private final RuleCall cEntriesTaskDictionaryEntryParserRuleCall_1_1_9_3_1_1_0 = (RuleCall)cEntriesAssignment_1_1_9_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_9_4 = (Keyword)cGroup_1_1_9.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_1_1_10 = (Keyword)cGroup_1_1.eContents().get(10);
		
		//OtherOperationStatement:
		//  'task:'( '{'
		//    'operation:' type=Operation ','
		//    'collection:' collection=[MakeStatement]
		//    'input:' '{'
		//      (entries+=TaskDictionaryEntry (',' entries+=TaskDictionaryEntry)*)?
		//    '}'
		//  '}') | 'task:'( '{'
		//    'operation:' type='UPDATE,'
		//    'collection:' collection=[MakeStatement]
		//    'input:' '{'
		//      (entries+=TaskDictionaryEntry (',' entries+=TaskDictionaryEntry)*)?
		//    '}'
		//    (',' "update:"'{'
		//      (entries+=TaskDictionaryEntry (',' entries+=TaskDictionaryEntry)*)?
		//    '}')?
		//  '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'task:'( '{'
		//  'operation:' type=Operation ','
		//  'collection:' collection=[MakeStatement]
		//  'input:' '{'
		//    (entries+=TaskDictionaryEntry (',' entries+=TaskDictionaryEntry)*)?
		//  '}'
		//'}') | 'task:'( '{'
		//  'operation:' type='UPDATE,'
		//  'collection:' collection=[MakeStatement]
		//  'input:' '{'
		//    (entries+=TaskDictionaryEntry (',' entries+=TaskDictionaryEntry)*)?
		//  '}'
		//  (',' "update:"'{'
		//    (entries+=TaskDictionaryEntry (',' entries+=TaskDictionaryEntry)*)?
		//  '}')?
		//'}')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'task:'( '{'
		//  'operation:' type=Operation ','
		//  'collection:' collection=[MakeStatement]
		//  'input:' '{'
		//    (entries+=TaskDictionaryEntry (',' entries+=TaskDictionaryEntry)*)?
		//  '}'
		//'}')
		public Group getGroup_0() { return cGroup_0; }
		
		//'task:'
		public Keyword getTaskKeyword_0_0() { return cTaskKeyword_0_0; }
		
		//( '{'
		//    'operation:' type=Operation ','
		//    'collection:' collection=[MakeStatement]
		//    'input:' '{'
		//      (entries+=TaskDictionaryEntry (',' entries+=TaskDictionaryEntry)*)?
		//    '}'
		//  '}')
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_1_0() { return cLeftCurlyBracketKeyword_0_1_0; }
		
		//'operation:'
		public Keyword getOperationKeyword_0_1_1() { return cOperationKeyword_0_1_1; }
		
		//type=Operation
		public Assignment getTypeAssignment_0_1_2() { return cTypeAssignment_0_1_2; }
		
		//Operation
		public RuleCall getTypeOperationParserRuleCall_0_1_2_0() { return cTypeOperationParserRuleCall_0_1_2_0; }
		
		//','
		public Keyword getCommaKeyword_0_1_3() { return cCommaKeyword_0_1_3; }
		
		//'collection:'
		public Keyword getCollectionKeyword_0_1_4() { return cCollectionKeyword_0_1_4; }
		
		//collection=[MakeStatement]
		public Assignment getCollectionAssignment_0_1_5() { return cCollectionAssignment_0_1_5; }
		
		//[MakeStatement]
		public CrossReference getCollectionMakeStatementCrossReference_0_1_5_0() { return cCollectionMakeStatementCrossReference_0_1_5_0; }
		
		//ID
		public RuleCall getCollectionMakeStatementIDTerminalRuleCall_0_1_5_0_1() { return cCollectionMakeStatementIDTerminalRuleCall_0_1_5_0_1; }
		
		//'input:'
		public Keyword getInputKeyword_0_1_6() { return cInputKeyword_0_1_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_1_7() { return cLeftCurlyBracketKeyword_0_1_7; }
		
		//(entries+=TaskDictionaryEntry (',' entries+=TaskDictionaryEntry)*)?
		public Group getGroup_0_1_8() { return cGroup_0_1_8; }
		
		//entries+=TaskDictionaryEntry
		public Assignment getEntriesAssignment_0_1_8_0() { return cEntriesAssignment_0_1_8_0; }
		
		//TaskDictionaryEntry
		public RuleCall getEntriesTaskDictionaryEntryParserRuleCall_0_1_8_0_0() { return cEntriesTaskDictionaryEntryParserRuleCall_0_1_8_0_0; }
		
		//(',' entries+=TaskDictionaryEntry)*
		public Group getGroup_0_1_8_1() { return cGroup_0_1_8_1; }
		
		//','
		public Keyword getCommaKeyword_0_1_8_1_0() { return cCommaKeyword_0_1_8_1_0; }
		
		//entries+=TaskDictionaryEntry
		public Assignment getEntriesAssignment_0_1_8_1_1() { return cEntriesAssignment_0_1_8_1_1; }
		
		//TaskDictionaryEntry
		public RuleCall getEntriesTaskDictionaryEntryParserRuleCall_0_1_8_1_1_0() { return cEntriesTaskDictionaryEntryParserRuleCall_0_1_8_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_1_9() { return cRightCurlyBracketKeyword_0_1_9; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_1_10() { return cRightCurlyBracketKeyword_0_1_10; }
		
		//'task:'( '{'
		//   'operation:' type='UPDATE,'
		//   'collection:' collection=[MakeStatement]
		//   'input:' '{'
		//     (entries+=TaskDictionaryEntry (',' entries+=TaskDictionaryEntry)*)?
		//   '}'
		//   (',' "update:"'{'
		//     (entries+=TaskDictionaryEntry (',' entries+=TaskDictionaryEntry)*)?
		//   '}')?
		// '}')
		public Group getGroup_1() { return cGroup_1; }
		
		//'task:'
		public Keyword getTaskKeyword_1_0() { return cTaskKeyword_1_0; }
		
		//( '{'
		//    'operation:' type='UPDATE,'
		//    'collection:' collection=[MakeStatement]
		//    'input:' '{'
		//      (entries+=TaskDictionaryEntry (',' entries+=TaskDictionaryEntry)*)?
		//    '}'
		//    (',' "update:"'{'
		//      (entries+=TaskDictionaryEntry (',' entries+=TaskDictionaryEntry)*)?
		//    '}')?
		//  '}')
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }
		
		//'operation:'
		public Keyword getOperationKeyword_1_1_1() { return cOperationKeyword_1_1_1; }
		
		//type='UPDATE,'
		public Assignment getTypeAssignment_1_1_2() { return cTypeAssignment_1_1_2; }
		
		//'UPDATE,'
		public Keyword getTypeUPDATEKeyword_1_1_2_0() { return cTypeUPDATEKeyword_1_1_2_0; }
		
		//'collection:'
		public Keyword getCollectionKeyword_1_1_3() { return cCollectionKeyword_1_1_3; }
		
		//collection=[MakeStatement]
		public Assignment getCollectionAssignment_1_1_4() { return cCollectionAssignment_1_1_4; }
		
		//[MakeStatement]
		public CrossReference getCollectionMakeStatementCrossReference_1_1_4_0() { return cCollectionMakeStatementCrossReference_1_1_4_0; }
		
		//ID
		public RuleCall getCollectionMakeStatementIDTerminalRuleCall_1_1_4_0_1() { return cCollectionMakeStatementIDTerminalRuleCall_1_1_4_0_1; }
		
		//'input:'
		public Keyword getInputKeyword_1_1_5() { return cInputKeyword_1_1_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_6() { return cLeftCurlyBracketKeyword_1_1_6; }
		
		//(entries+=TaskDictionaryEntry (',' entries+=TaskDictionaryEntry)*)?
		public Group getGroup_1_1_7() { return cGroup_1_1_7; }
		
		//entries+=TaskDictionaryEntry
		public Assignment getEntriesAssignment_1_1_7_0() { return cEntriesAssignment_1_1_7_0; }
		
		//TaskDictionaryEntry
		public RuleCall getEntriesTaskDictionaryEntryParserRuleCall_1_1_7_0_0() { return cEntriesTaskDictionaryEntryParserRuleCall_1_1_7_0_0; }
		
		//(',' entries+=TaskDictionaryEntry)*
		public Group getGroup_1_1_7_1() { return cGroup_1_1_7_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_7_1_0() { return cCommaKeyword_1_1_7_1_0; }
		
		//entries+=TaskDictionaryEntry
		public Assignment getEntriesAssignment_1_1_7_1_1() { return cEntriesAssignment_1_1_7_1_1; }
		
		//TaskDictionaryEntry
		public RuleCall getEntriesTaskDictionaryEntryParserRuleCall_1_1_7_1_1_0() { return cEntriesTaskDictionaryEntryParserRuleCall_1_1_7_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_8() { return cRightCurlyBracketKeyword_1_1_8; }
		
		//(',' "update:"'{'
		//  (entries+=TaskDictionaryEntry (',' entries+=TaskDictionaryEntry)*)?
		//'}')?
		public Group getGroup_1_1_9() { return cGroup_1_1_9; }
		
		//','
		public Keyword getCommaKeyword_1_1_9_0() { return cCommaKeyword_1_1_9_0; }
		
		//"update:"
		public Keyword getUpdateKeyword_1_1_9_1() { return cUpdateKeyword_1_1_9_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_9_2() { return cLeftCurlyBracketKeyword_1_1_9_2; }
		
		//(entries+=TaskDictionaryEntry (',' entries+=TaskDictionaryEntry)*)?
		public Group getGroup_1_1_9_3() { return cGroup_1_1_9_3; }
		
		//entries+=TaskDictionaryEntry
		public Assignment getEntriesAssignment_1_1_9_3_0() { return cEntriesAssignment_1_1_9_3_0; }
		
		//TaskDictionaryEntry
		public RuleCall getEntriesTaskDictionaryEntryParserRuleCall_1_1_9_3_0_0() { return cEntriesTaskDictionaryEntryParserRuleCall_1_1_9_3_0_0; }
		
		//(',' entries+=TaskDictionaryEntry)*
		public Group getGroup_1_1_9_3_1() { return cGroup_1_1_9_3_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_9_3_1_0() { return cCommaKeyword_1_1_9_3_1_0; }
		
		//entries+=TaskDictionaryEntry
		public Assignment getEntriesAssignment_1_1_9_3_1_1() { return cEntriesAssignment_1_1_9_3_1_1; }
		
		//TaskDictionaryEntry
		public RuleCall getEntriesTaskDictionaryEntryParserRuleCall_1_1_9_3_1_1_0() { return cEntriesTaskDictionaryEntryParserRuleCall_1_1_9_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_9_4() { return cRightCurlyBracketKeyword_1_1_9_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_10() { return cRightCurlyBracketKeyword_1_1_10; }
	}
	public class TaskDictionaryEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.TaskDictionaryEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueNameIDTerminalRuleCall_0_0 = (RuleCall)cValueNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueStringAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueStringSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cValueStringAssignment_2_0.eContents().get(0);
		private final Assignment cValueIntAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cValueIntINTTerminalRuleCall_2_1_0 = (RuleCall)cValueIntAssignment_2_1.eContents().get(0);
		
		//TaskDictionaryEntry:
		//  valueName=ID ':' (valueString=STRING | valueInt=INT);
		@Override public ParserRule getRule() { return rule; }
		
		//valueName=ID ':' (valueString=STRING | valueInt=INT)
		public Group getGroup() { return cGroup; }
		
		//valueName=ID
		public Assignment getValueNameAssignment_0() { return cValueNameAssignment_0; }
		
		//ID
		public RuleCall getValueNameIDTerminalRuleCall_0_0() { return cValueNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(valueString=STRING | valueInt=INT)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//valueString=STRING
		public Assignment getValueStringAssignment_2_0() { return cValueStringAssignment_2_0; }
		
		//STRING
		public RuleCall getValueStringSTRINGTerminalRuleCall_2_0_0() { return cValueStringSTRINGTerminalRuleCall_2_0_0; }
		
		//valueInt=INT
		public Assignment getValueIntAssignment_2_1() { return cValueIntAssignment_2_1; }
		
		//INT
		public RuleCall getValueIntINTTerminalRuleCall_2_1_0() { return cValueIntINTTerminalRuleCall_2_1_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGETKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDELETEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cINSERTKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Operation:
		//  'GET' | 'DELETE' | 'INSERT';
		@Override public ParserRule getRule() { return rule; }
		
		//'GET' | 'DELETE' | 'INSERT'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'GET'
		public Keyword getGETKeyword_0() { return cGETKeyword_0; }
		
		//'DELETE'
		public Keyword getDELETEKeyword_1() { return cDELETEKeyword_1; }
		
		//'INSERT'
		public Keyword getINSERTKeyword_2() { return cINSERTKeyword_2; }
	}
	public class FieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.FieldType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNumberKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBooleanKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDateKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//FieldType:
		//  'String' | 'Number' | 'Boolean'|'Date';
		@Override public ParserRule getRule() { return rule; }
		
		//'String' | 'Number' | 'Boolean'|'Date'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'String'
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//'Number'
		public Keyword getNumberKeyword_1() { return cNumberKeyword_1; }
		
		//'Boolean'
		public Keyword getBooleanKeyword_2() { return cBooleanKeyword_2; }
		
		//'Date'
		public Keyword getDateKeyword_3() { return cDateKeyword_3; }
	}
	
	
	private final MongoDBElements pMongoDB;
	private final ModelElements pModel;
	private final OperationStatementElements pOperationStatement;
	private final ConnectionStatementElements pConnectionStatement;
	private final MakeStatementElements pMakeStatement;
	private final DictionaryEntryElements pDictionaryEntry;
	private final OtherOperationStatementElements pOtherOperationStatement;
	private final TaskDictionaryEntryElements pTaskDictionaryEntry;
	private final OperationElements pOperation;
	private final FieldTypeElements pFieldType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMongoDB = new MongoDBElements();
		this.pModel = new ModelElements();
		this.pOperationStatement = new OperationStatementElements();
		this.pConnectionStatement = new ConnectionStatementElements();
		this.pMakeStatement = new MakeStatementElements();
		this.pDictionaryEntry = new DictionaryEntryElements();
		this.pOtherOperationStatement = new OtherOperationStatementElements();
		this.pTaskDictionaryEntry = new TaskDictionaryEntryElements();
		this.pOperation = new OperationElements();
		this.pFieldType = new FieldTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl2.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MongoDB:
	//    models += Model*;
	public MongoDBElements getMongoDBAccess() {
		return pMongoDB;
	}
	
	public ParserRule getMongoDBRule() {
		return getMongoDBAccess().getRule();
	}
	
	//Model:
	//  connection=ConnectionStatement
	//  statements+=OperationStatement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//OperationStatement:
	//  schema=MakeStatement operations+=OtherOperationStatement*;
	public OperationStatementElements getOperationStatementAccess() {
		return pOperationStatement;
	}
	
	public ParserRule getOperationStatementRule() {
		return getOperationStatementAccess().getRule();
	}
	
	//ConnectionStatement:
	//  'DatabaseParameters' '{'
	//  'Connection' connectionString=STRING ','&
	//    'database' database=STRING
	//  '}';
	public ConnectionStatementElements getConnectionStatementAccess() {
		return pConnectionStatement;
	}
	
	public ParserRule getConnectionStatementRule() {
		return getConnectionStatementAccess().getRule();
	}
	
	//MakeStatement:
	//  'Collection' name=ID
	//  '{'
	//    (entries+=DictionaryEntry (',' entries+=DictionaryEntry)*)?
	//  '}';
	public MakeStatementElements getMakeStatementAccess() {
		return pMakeStatement;
	}
	
	public ParserRule getMakeStatementRule() {
		return getMakeStatementAccess().getRule();
	}
	
	//DictionaryEntry:
	//  name=ID ':' fieldType=FieldType (status?="required")? (uniqueKey?='unique')?
	//  | name=ID ':' 'ref' refDictionary=[MakeStatement | ID];
	public DictionaryEntryElements getDictionaryEntryAccess() {
		return pDictionaryEntry;
	}
	
	public ParserRule getDictionaryEntryRule() {
		return getDictionaryEntryAccess().getRule();
	}
	
	//OtherOperationStatement:
	//  'task:'( '{'
	//    'operation:' type=Operation ','
	//    'collection:' collection=[MakeStatement]
	//    'input:' '{'
	//      (entries+=TaskDictionaryEntry (',' entries+=TaskDictionaryEntry)*)?
	//    '}'
	//  '}') | 'task:'( '{'
	//    'operation:' type='UPDATE,'
	//    'collection:' collection=[MakeStatement]
	//    'input:' '{'
	//      (entries+=TaskDictionaryEntry (',' entries+=TaskDictionaryEntry)*)?
	//    '}'
	//    (',' "update:"'{'
	//      (entries+=TaskDictionaryEntry (',' entries+=TaskDictionaryEntry)*)?
	//    '}')?
	//  '}');
	public OtherOperationStatementElements getOtherOperationStatementAccess() {
		return pOtherOperationStatement;
	}
	
	public ParserRule getOtherOperationStatementRule() {
		return getOtherOperationStatementAccess().getRule();
	}
	
	//TaskDictionaryEntry:
	//  valueName=ID ':' (valueString=STRING | valueInt=INT);
	public TaskDictionaryEntryElements getTaskDictionaryEntryAccess() {
		return pTaskDictionaryEntry;
	}
	
	public ParserRule getTaskDictionaryEntryRule() {
		return getTaskDictionaryEntryAccess().getRule();
	}
	
	//Operation:
	//  'GET' | 'DELETE' | 'INSERT';
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//FieldType:
	//  'String' | 'Number' | 'Boolean'|'Date';
	public FieldTypeElements getFieldTypeAccess() {
		return pFieldType;
	}
	
	public ParserRule getFieldTypeRule() {
		return getFieldTypeAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
